package com.carrotgarden.maven.scalor.eclipse

import org.apache.maven.plugins.annotations._
import com.carrotgarden.maven.tools.Description
// import util.Folder._
import java.io.File

trait SettingsJava {

  @Description( """
  Apply changes to the org.eclipse.jdt.core.prefs configuration file.
  """ )
  @Parameter(
    property     = "scalor.eclipseSettingsJavaApply",
    defaultValue = "true"
  )
  var eclipseSettingsJavaApply : Boolean = _

  @Description( """
  Location of org.eclipse.jdt.core.prefs configuration file.
  """ )
  @Parameter(
    property     = "scalor.eclipseSettingsJavaFile",
    defaultValue = "${project.basedir}/.settings/org.eclipse.jdt.core.prefs"
  )
  var eclipseSettingsJavaFile : File = _

  @Description( """
  Content of generated org.eclipse.jdt.core.prefs configuration file.
  Use <![CDATA[ ... ]]> brackets in pom.xml to preserve properties format.
  """ )
  @Parameter(
    property     = "scalor.eclipseSettingsJavaProps",
    defaultValue = """
# Generated by scalor-maven-plugin @ ${scalor.autoconfBuildStamp}.

eclipse.preferences.version=1

org.eclipse.jdt.core.compiler.source=${maven.compiler.source}
org.eclipse.jdt.core.compiler.compliance=${maven.compiler.source}
org.eclipse.jdt.core.compiler.codegen.targetPlatform=${maven.compiler.target}
org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning
"""
  )
  var eclipseSettingsJavaProps : String = _

}

trait SettingsScala {

  @Description( """
  Apply changes to the org.scala-ide.sdt.core.prefs configuration file.
  """ )
  @Parameter(
    property     = "scalor.eclipseSettingsScalaApply",
    defaultValue = "true"
  )
  var eclipseSettingsScalaApply : Boolean = _

  @Description( """
  Location of org.scala-ide.sdt.core.prefs configuration file.
  """ )
  @Parameter(
    property     = "scalor.eclipseSettingsScalaFile",
    defaultValue = "${project.basedir}/.settings/org.scala-ide.sdt.core.prefs"
  )
  var eclipseSettingsScalaFile : File = _

  @Description( """
  Content of generated org.scala-ide.sdt.core.prefs configuration file.
  Use <![CDATA[ ... ]]> brackets in pom.xml to preserve properties text format.
  Use properties provided by scalor:auto-conf execution.
  Use properteis form standard maven sources:  
  http://maven.apache.org/ref/3.5.2/maven-core/apidocs/org/apache/maven/plugin/PluginParameterExpressionEvaluator.html
  Use available scala compiler configuration properties exposed in scala-ide:
  https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/ScalaSettings.scala
  """ )
  @Parameter(
    property     = "scalor.eclipseSettingsScalaProps",
    defaultValue = """
# Generated by scalor-maven-plugin @ ${scalor.autoconfBuildStamp}.

eclipse.preferences.version=1

#
# Required scala-ide settings.
#

# Configure compilation scopes: macros, main, tests.
# http://scala-ide.org/docs/current-user-doc/features/scalacompiler/index.html
useScopesCompiler=true

# Build roots for compilation scope=macro.
${scalor.autoconfEclipseRootsMacro}

# Build roots for compilation scope=main. 
${scalor.autoconfEclipseRootsMain}

# Build roots for compilation scope=test. 
${scalor.autoconfEclipseRootsTest}

scala.compiler.useProjectSettings=true
scala.compiler.sourceLevel=${scalor.autoconfScalaVersionEpoch}

#
# Optional scala-ide settings.
# 

# Incremental compiler mode
compileorder=${scalor.zincCompileOrder}

# Produce extra logging.
verbose=false 

# JVM class file version.
target=jvm-${scalor.zincTargetVersion}

# Specify scala-ide scala installation id.
#scala.compiler.installation=

#
# Scala compiler plugins setup.
#

# Specify provided plugin directory.
#Xpluginsdir=
#Xplugin-disable=
#Xplugin-require=

# Use explicit compiler plugin jar path list.
# Compiler plugin list is discovered from 
# the scalor plugin/dependencies.
Xplugin=${scalor.autoconfCompilerPluginList}

"""
  )
  var eclipseSettingsScalaProps : String = _

}

trait SettingsMaven {

}

trait SettingsResources {

  @Description( """
  Apply changes to the org.eclipse.core.resources.prefs configuration file.
  """ )
  @Parameter(
    property     = "scalor.eclipseSettingsResourcesApply",
    defaultValue = "true"
  )
  var eclipseSettingsResourcesApply : Boolean = _

  @Description( """
  Location of org.eclipse.core.resources.prefs configuration file.
  """ )
  @Parameter(
    property     = "scalor.eclipseSettingsResourcesFile",
    defaultValue = "${project.basedir}/.settings/org.eclipse.core.resources.prefs"
  )
  var eclipseSettingsResourcesFile : File = _

  @Description( """
  Content of generated org.eclipse.core.resources.prefs configuration file.
  Use <![CDATA[ ... ]]> brackets in pom.xml to preserve properties format.
  """ )
  @Parameter(
    property     = "scalor.eclipseSettingsResourcesProps",
    defaultValue = """
# Generated by scalor-maven-plugin @ ${scalor.autoconfBuildStamp}.

eclipse.preferences.version=1

# Eclipse .project file.
encoding/<project>=UTF-8

# Build roots for compilation scope=macro.
${scalor.autoconfEclipseEncodinsMacro}

# Build roots for compilation scope=main.
${scalor.autoconfEclipseEncodinsMain}

# Build roots for compilation scope=test.
${scalor.autoconfEclipseEncodinsTest}

"""
  )
  var eclipseSettingsResourcesProps : String = _

}

//trait SettingsAny {
//
//  def eclipseSettingsApply : Boolean
//  def eclipseSettingsFile : GoodFile
//  def eclipseSettingsProps : String
//
//}

trait Settings extends AnyRef
  with SettingsJava
  with SettingsScala
  with SettingsResources {

  import Settings._

  def settingsProvide( file : File, text : String ) = {
    //    ensureParent( file )
    //    persistString( file, text )
  }

}

object Settings {

  //  import org.apache.commons.configuration2.PropertiesConfiguration
  //  import org.apache.commons.configuration2.PropertiesConfigurationLayout
  //  import org.apache.commons.configuration2.builder.fluent.Parameters
  //  import org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder
  //  import org.apache.commons.configuration2.FileBasedConfiguration
  //
  //  def prefsBuilder( file : File ) = {
  //    val params = new Parameters()
  //    new FileBasedConfigurationBuilder[ FileBasedConfiguration ](
  //      classOf[ PropertiesConfiguration ]
  //    ).configure( params.fileBased().setFile( file ) )
  //  }
  //
  //  def prefsLoad( file : File ) = {
  //    val config = new PropertiesConfiguration()
  //    //    config.read(in)
  //
  //  }

}
