package com.carrotgarden.maven.scalor.zinc

import java.io.File
import org.apache.maven.plugins.annotations._
import com.carrotgarden.maven.tools.Description

import com.carrotgarden.maven.scalor.base
import com.carrotgarden.maven.scalor.util.Folder._

/**
 * Compiler configuration parameters for scope=macro.
 */
trait ParamsMacro extends AnyRef
  with Params
  with ParamsMacroCache {

}

trait ParamsMacroCache {

  @Description( """
  Location of zinc incremental compiler state file for scope=macro.
  """ )
  @Parameter(
    property     = "scalor.zincCacheMacro",
    defaultValue = "${project.basedir}/.scalor/cache-macro.zip"
  )
  var zincCacheMacro : File = _

}

/**
 * Compiler configuration parameters for scope=main.
 */
trait ParamsMain extends AnyRef
  with Params
  with ParamsMainCache {

}

trait ParamsMainCache {

  @Description( """
  Location of zinc incremental compiler state file for scope=main.
  """ )
  @Parameter(
    property     = "scalor.zincCacheMain",
    defaultValue = "${project.basedir}/.scalor/cache-main.zip"
  )
  var zincCacheMain : File = _

}

/**
 * Compiler configuration parameters for scope=test.
 */
trait ParamsTest extends AnyRef
  with Params
  with ParamsTestCache {

}

trait ParamsTestCache {

  @Description( """
  Location of zinc incremental compiler state file for scope=test.
  """ )
  @Parameter(
    property     = "scalor.zincCacheTest",
    defaultValue = "${project.basedir}/.scalor/cache-test.zip"
  )
  var zincCacheTest : File = _

}

/**
 * Discover zinc compiler plugins from the class loader class path.
 */
trait ParamsPluginList {

  @Description( """
  Enable automatic plugin discovery and configuration.
  Scala compiler plugins are resolved from this plugin dependencies.
	Each discoverd plugin is proved as '-Xplugin /plugin/absolute/path.jar' Scala compiler option. 
	Configures both Maven and Eclipse.
  """ )
  @Parameter(
    property     = "scalor.zincInjectPlugins",
    defaultValue = "true"
  )
  var zincInjectPlugins : Boolean = _

  @Description( """
  Scala compiler plugin descriptor file name,
  stored inside Scala compiler plugin jar.
  Used for auto discovery of compiler plugins
  form this maven plugin dependency class path.
	Configures both Maven and Eclipse.
  """ )
  @Parameter(
    property     = "scalor.zincPluginDescriptor",
    defaultValue = "scalac-plugin.xml"
  )
  var zincPluginDescriptor : String = _

  //  /**
  //   * Discover zinc compiler plugins from the class loader class path.
  //   */
  //  def zincPluginDiscoveryList( loader : ClassLoader ) : Array[ File ] =
  //    if ( zincInjectPlugins ) findJarByResource( loader, zincPluginDescriptor ) else Array()

}

trait ParamScalaInstall {

  @Description( """
  Scala installation title prefix used for Scala installtions generated by this plugin.
	Actual generated Scala installation will also include a summary, i.e.: 'Scalor [MD5]',
	where '[MD5]' is MD5 digest of combined artifact paths included in the installation.
  """ )
  @Parameter(
    property     = "scalor.zincScalaInstallTitle",
    defaultValue = "Scalor"
  )
  var zincScalaInstallTitle : String = _

}

trait ParamsCompileOrder {

  @Description( """
  Java+Scala compilation order: Mixed, JavaThenScala, ScalaThenJava.
	Configures both Maven and Eclipse.
  """ )
  @Parameter(
    property     = "scalor.zincCompileOrder",
    defaultValue = "Mixed"
  )
  var zincCompileOrder : String = _

}

trait ParamsOptionsJavaC {

  @Description( """
  Options for JavaC compiler.
    ${scalor.zincTargetVersion}
    ${scalor.buildSourceEncoding}
  """ )
  @Parameter(
    property     = "scalor.zincOptionsJavaC",
    defaultValue = """
    -target
    1.8
		-encoding
    UTF-8  
    -deprecation
    """
  )
  var zincOptionsJavaC : String = _

}

trait ParamsOptionsScalaC {

  @Description( """
  Options for ScalaC compiler.
	Configures both Maven and Eclipse.
    -target:jvm-${scalor.zincTargetVersion}
    ${scalor.buildSourceEncoding}
  """ )
  @Parameter(
    property     = "scalor.zincOptionsScalaC",
    defaultValue = """
    -target:jvm-1.8
		-Xpluginsdir  
    ${project.build.directory}/scala-plugin  
		-encoding
    UTF-8  
    -deprecation  
    -unchecked  
    -feature  
    """
  )
  var zincOptionsScalaC : String = _

}

/**
 * Incremental compiler configuration parameters.
 */
trait Params extends AnyRef
  with base.AnyPar
  with base.BuildEncoding
  with ParamsOptionsJavaC
  with ParamsOptionsScalaC
  with ParamsCompileOrder
  with ParamScalaInstall
  with ParamsPluginList {

  import Params._

  @Description( """
  Regular expression for Java source file discovery.
  """ )
  @Parameter(
    property     = "scalor.zincRegexAnyJava",
    defaultValue = """^(.+)[.]java$"""
  )
  var zincRegexAnyJava : String = _

  @Description( """
  Regular expression for Scala source file discovery.
  """ )
  @Parameter(
    property     = "scalor.zincRegexAnyScala",
    defaultValue = """^(.+)[.]scala$"""
  )
  var zincRegexAnyScala : String = _

  /**
   * Regular expression for Java or Scala source file discovery.
   */
  def zincRegexAnySource = zincRegexAnyJava + "|" + zincRegexAnyScala

  @Description( """
  Flag to force version constistency check
  among dependency jars discovered with regular expressions.
  """ )
  @Parameter(
    property     = "scalor.zincVerifyVersion",
    defaultValue = "true"
  )
  var zincVerifyVersion : Boolean = _

  @Description( """
  Abort zinc incremental compiler after error limit.
  """ )
  @Parameter(
    property     = "scalor.zincMaximumErrors",
    defaultValue = "64"
  )
  var zincMaximumErrors : Int = _

  @Description( """
  Generated JVM class file version for java and scala.
  """ )
  @Parameter(
    property     = "scalor.zincTargetVersion",
    defaultValue = "${maven.compiler.target}"
  )
  var zincTargetVersion : String = _

  @Description( """
  Enable logging of source files.
  """ )
  @Parameter(
    property     = "scalor.zincLogSourcesList",
    defaultValue = "false"
  )
  var zincLogSourcesList : Boolean = _

  @Description( """
  Enable zinc compiler output.
  Uses Maven logger at "INFO" level.
  Available zinc logger levels:
  1 = Debug, Info, Warn, Error;
  2 = Info, Warn, Error;
  3 = Warn, Error;
  4 = Error;
  """ )
  @Parameter(
    property     = "scalor.zincLogAtLevel",
    defaultValue = "1"
  )
  var zincLogAtLevel : Int = _

  @Description( """
  Enable logging of current project build class path.
  """ )
  @Parameter(
    property     = "scalor.zincLogProjectClassPath",
    defaultValue = "false"
  )
  var zincLogProjectClassPath : Boolean = _

  @Description( """
  Enable logging of Zinc compiler-bridge class path
  discovered from this maven plugin configuration.
  """ )
  @Parameter(
    property     = "scalor.zincLogBridgeClassPath",
    defaultValue = "false"
  )
  var zincLogBridgeClassPath : Boolean = _

  @Description( """
  Enable logging of Zinc scala-compiler class path
  discovered from this maven plugin configuration.
  """ )
  @Parameter(
    property     = "scalor.zincLogCompilerClassPath",
    defaultValue = "false"
  )
  var zincLogCompilerClassPath : Boolean = _

  @Description( """
  Enable logging of Zinc compiler plugins
  discovered from this maven plugin configuration.
  """ )
  @Parameter(
    property     = "scalor.zincLogCompilerPluginList",
    defaultValue = "false"
  )
  var zincLogCompilerPluginList : Boolean = _

  @Description( """
  Enable logging of incremental compiler units.
  """ )
  @Parameter(
    property     = "scalor.zincLogProgressUnit",
    defaultValue = "false"
  )
  var zincLogProgressUnit : Boolean = _

  @Description( """
  Enable logging of incremental compiler progress.
  """ )
  @Parameter(
    property     = "scalor.zincLogProgressRate",
    defaultValue = "false"
  )
  var zincLogProgressRate : Boolean = _

  /**
   * JavaC/ScalaC source encoding configuration stanza.
   */
  def zincStanzaEncoding = Array[ String ]( "-encoding", buildSourceEncoding )

  /**
   * JavaC target JVM class version configuration stanza.
   */
  def zincStanzaTargetJavaC = Array[ String ]( "-target", zincTargetVersion )

  /**
   * ScalaC target JVM class version configuration stanza.
   */
  def zincStanzaTargetScalaC = Array[ String ]( s"-target:jvm-${zincTargetVersion}" )

  /**
   * Produce final JavaC options from system options and user options.
   */
  def zincSettingsJavaC : Array[ String ] =
    zincStanzaEncoding ++ zincStanzaTargetJavaC ++ parseCommonSequence( zincOptionsJavaC, commonSequenceSeparator )

  /**
   * Produce final ScalaC options from system options and user options.
   */
  def zincSettingsScalaC : Array[ String ] =
    zincStanzaEncoding ++ zincStanzaTargetScalaC ++ parseCommonSequence( zincOptionsScalaC, commonSequenceSeparator )

}

object Params {

}
