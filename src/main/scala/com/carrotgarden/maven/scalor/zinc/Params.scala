package com.carrotgarden.maven.scalor.zinc

import java.io.File
import org.apache.maven.plugins.annotations._
import com.carrotgarden.maven.tools.Description

import com.carrotgarden.maven.scalor.base
import com.carrotgarden.maven.scalor.util.Folder._

/**
 * Compiler configuration parameters for scope=macro.
 */
trait ParamsMacro extends AnyRef
  with Params
  with ParamsMacroCache {

}

trait ParamsMacroCache {

  @Description( """
  Location of Zinc incremental compiler state file for scope=macro.
  """ )
  @Parameter(
    property     = "scalor.zincCacheMacro",
    defaultValue = "${project.basedir}/.scalor/cache-macro.zip"
  )
  var zincCacheMacro : File = _

}

/**
 * Compiler configuration parameters for scope=main.
 */
trait ParamsMain extends AnyRef
  with Params
  with ParamsMainCache {

}

trait ParamsMainCache {

  @Description( """
  Location of Zinc incremental compiler state file for scope=main.
  """ )
  @Parameter(
    property     = "scalor.zincCacheMain",
    defaultValue = "${project.basedir}/.scalor/cache-main.zip"
  )
  var zincCacheMain : File = _

}

/**
 * Compiler configuration parameters for scope=test.
 */
trait ParamsTest extends AnyRef
  with Params
  with ParamsTestCache {

}

trait ParamsTestCache {

  @Description( """
  Location of Zinc incremental compiler state file for scope=test.
  """ )
  @Parameter(
    property     = "scalor.zincCacheTest",
    defaultValue = "${project.basedir}/.scalor/cache-test.zip"
  )
  var zincCacheTest : File = _

}

trait ParamScalaInstall {

  @Description( """
  Scala installation title prefix used for Scala installtions generated by this plugin.
  Actual generated Scala installation will also include a summary, i.e.: <code>Scalor [MD5]</code>,
  where <code>[MD5]</code> is MD5 digest of combined artifact paths included in the installation.
  """ )
  @Parameter(
    property     = "scalor.zincScalaInstallTitle",
    defaultValue = "Scalor"
  )
  var zincScalaInstallTitle : String = _

}

trait ParamsCompileOptions extends AnyRef
  with base.ParamsAny {

  @Description( """
  Combined options for ScalaC compiler, Scalor Plugin Zinc compiler, Scala IDE Plugin Zinc compiler.
<ul>
  <li>ScalaC compiler uses [ standard ] options in Maven/Eclipse.</li>
  <li>Scalor Zinc compiler uses [ standard, compile-order ] options in Maven.</li>
  <li>Scala IDE Zinc compiler uses [ standard, compile-order, eclipse-builder ] options in Eclipse.</li>
</ul>
  ScalaC compiler options reference: 
  <a href="https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/ScalaSettings.scala"
  target="_blank">
    ScalaSettings.scala
  </a>
  <a href="https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/StandardScalaSettings.scala"
  target="_blank">
    StandardScalaSettings.scala
  </a>
<br/>
  Scalor Zinc compiler options reference: 
  <a href="https://github.com/sbt/zinc/blob/1.1.x/zinc/src/main/scala/sbt/internal/inc/IncrementalCompilerImpl.scala"
  target="_blank">
    IncrementalCompilerImpl.scala
  </a>
<br/>
  Scala IDE Zinc compiler options reference: 
  <a href="https://github.com/scala-ide/scala-ide/blob/master/org.scala-ide.sdt.core/src/org/scalaide/ui/internal/preferences/IDESettings.scala"
  target="_blank">
    IDESettings$ScalaPluginSettings.scala
  </a>
<br/>
<br/>
  For consistent Maven vs Eclipse builds, use non-interfering eclipse-builder options.
  Separator parameter: <a href="#commonSequenceSeparator"><b>commonSequenceSeparator</b></a>.
  Examine available/effective options via <a href="#zincLogCompileOptions"><b>zincLogCompileOptions</b></a>.
<br/>
<br/>
  Options processing steps:
<ul>
  <li>options are validated</li>
  <li>default options are silently removed</li>
  <li>invalid options are reported and errored</li>
  <li>-Xplugin options are discovered from <a href="#definePluginList"><b>definePluginList</b></a> </li>
</ul>
  """ )
  @Parameter(
    property     = "scalor.zincCompileOptions",
    defaultValue = """
    -feature ; -unchecked ; -deprecation ;  
    -encoding ; ${project.build.sourceEncoding} ;
    -target:jvm-${maven.compiler.target} ;
    -Xmaxerrs ; 10 ; 
    -compileorder:Mixed ;
    -useScopesCompiler ;
    """
  )
  var zincCompileOptions : String = _

  def parseCompileOptions : Array[ String ] = {
    parseCommonSequence( zincCompileOptions, commonSequenceSeparator )
  }

}

/**
 * Incremental compiler configuration parameters.
 */
trait Params extends AnyRef
  with base.ParamsAny
  with ParamsCompileOptions
  with ParamsLogging
  with ParamScalaInstall {

  import Params._

  @Description( """
  Regular expression for Java source file discovery.
  """ )
  @Parameter(
    property     = "scalor.zincRegexAnyJava",
    defaultValue = """^.+[.]java$"""
  )
  var zincRegexAnyJava : String = _

  @Description( """
  Regular expression for Scala source file discovery.
  """ )
  @Parameter(
    property     = "scalor.zincRegexAnyScala",
    defaultValue = """^.+[.]scala$"""
  )
  var zincRegexAnyScala : String = _

  @Description( """
  Flag to force version constistency check
  among dependency artifacts discovered from
    <a href="#defineBridge"><b>defineBridge</b></a>,
    <a href="#defineCompiler"><b>defineCompiler</b></a>,
    <a href="#definePluginList"><b>definePluginList</b></a>.
  """ )
  @Parameter(
    property     = "scalor.zincVerifyVersion",
    defaultValue = "true"
  )
  var zincVerifyVersion : Boolean = _

}

trait ParamsLogging {

  @Description( """
  Enable logging of source Java and Scala files.
  """ )
  @Parameter(
    property     = "scalor.zincLogSourcesList",
    defaultValue = "false"
  )
  var zincLogSourcesList : Boolean = _

  @Description( """
  Enable Zinc compiler logger output.
  Uses Maven logger at <code>INFO</code> level.
  Available Zinc logger levels:
<pre>
  1 -> Debug, Info, Warn, Error
  2 -> Info, Warn, Error
  3 -> Warn, Error
  4 -> Error
</pre>
  """ )
  @Parameter(
    property     = "scalor.zincLogAtLevel",
    defaultValue = "1"
  )
  var zincLogAtLevel : Int = _

  @Description( """
  Enable logging of current project build class path.
  """ )
  @Parameter(
    property     = "scalor.zincLogProjectClassPath",
    defaultValue = "false"
  )
  var zincLogProjectClassPath : Boolean = _

  @Description( """
  Enable logging of Zinc compiler-bridge class path 
  discovered from <a href="#defineBridge"><b>defineBridge</b></a>.
  """ )
  @Parameter(
    property     = "scalor.zincLogBridgeClassPath",
    defaultValue = "false"
  )
  var zincLogBridgeClassPath : Boolean = _

  @Description( """
  Enable logging of Zinc scala-compiler class path
  discovered from <a href="#defineCompiler"><b>defineCompiler</b></a>.
  """ )
  @Parameter(
    property     = "scalor.zincLogCompilerClassPath",
    defaultValue = "false"
  )
  var zincLogCompilerClassPath : Boolean = _

  @Description( """
  Enable logging of Zinc compiler plugins
  discovered from <a href="#definePluginList"><b>definePluginList</b></a>.
  """ )
  @Parameter(
    property     = "scalor.zincLogCompilerPluginList",
    defaultValue = "false"
  )
  var zincLogCompilerPluginList : Boolean = _

  @Description( """
  Enable logging of Zinc incremental compiler units.
  """ )
  @Parameter(
    property     = "scalor.zincLogProgressUnit",
    defaultValue = "false"
  )
  var zincLogProgressUnit : Boolean = _

  @Description( """
  Enable logging of Zinc incremental compiler progress.
  """ )
  @Parameter(
    property     = "scalor.zincLogProgressRate",
    defaultValue = "false"
  )
  var zincLogProgressRate : Boolean = _

  @Description( """
  Enable logging of available/effective compiler options with help description.
  Report output location: <a href="#zincComileOptionsReport"><b>zincComileOptionsReport</b></a>
  """ )
  @Parameter(
    property     = "scalor.zincLogCompileOptions",
    defaultValue = "true"
  )
  var zincLogCompileOptions : Boolean = _

  @Description( """
  Report available/effective compiler options with help description to the report file.
  Enable output: <a href="#zincLogCompileOptions"><b>zincLogCompileOptions</b></a>
  """ )
  @Parameter(
    property     = "scalor.zincComileOptionsReport",
    defaultValue = "${project.build.directory}/scalor-options-report.txt"
  )
  var zincComileOptionsReport : File = _

}

object Params extends Params {

}
