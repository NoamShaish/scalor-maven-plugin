package com.carrotgarden.maven.scalor.scalajs

import org.apache.maven.plugins.annotations._
import java.io.File

import com.carrotgarden.maven.scalor.base
import com.carrotgarden.maven.scalor.util.Folder._
import com.carrotgarden.maven.scalor.base.Scope

import com.carrotgarden.maven.tools.Description

/**
 * Scala.js linker build parameters for scope=main.
 */
trait BuildMain extends Build
  with BuildMainDependency
  with BuildMainTarget {

  @Description( """
  Name of the generated runtime JavaScript file.
  File is packaged inside <a href="#linkerMetaFolder"><b>linkerMetaFolder</b></a>
  """ )
  @Parameter(
    property     = "scalor.linkerMainRuntimeJs", //
    defaultValue = "runtime.js"
  )
  var linkerMainRuntimeJs : String = _

  @Description( """
  Name of the runtime dependency resolution report file.
  File is packaged inside <a href="#linkerMetaFolder"><b>linkerMetaFolder</b></a>
  """ )
  @Parameter(
    property     = "scalor.linkerMainRuntimeDeps", //
    defaultValue = "runtime.deps"
  )
  var linkerMainRuntimeDeps : String = _

  override def linkerRuntimeJs = linkerMainRuntimeJs
  override def linkerRuntimeDeps = linkerMainRuntimeDeps

}

trait BuildMainDependency extends base.BuildAnyDependency {

  @Description( """
  Classes generated by current project and included in linker class path.
  """ )
  @Parameter(
    property     = "scalor.linkerBuildClasses", //
    defaultValue = "${project.build.directory}/macro-classes,${project.build.directory}/classes"
  )
  var linkerMainDependencyFolders : Array[ File ] = Array[ File ]()

  @Description( """
  Build linker class path from project dependency artifacts based on these scopes.
  """ )
  @Parameter(
    property     = "scalor.linkerMainDependencyScopes",
    defaultValue = "provided"
  )
  var linkerMainDependencyScopes : Array[ String ] = Array[ String ]()

  override def buildDependencyFolders = linkerMainDependencyFolders
  override def buildDependencyScopes = linkerMainDependencyScopes

}

trait BuildMainTarget extends base.BuildAnyTarget with BuildMetaFolder {

  @Description( """
  Build output directory for the generated runtime JavaScript file.
  """ )
  @Parameter(
    property     = "scalor.linkerMainTargetFolder", //
    defaultValue = "${project.build.directory}/scala-js/main"
  )
  var linkerMainTargetFolder : File = _

  override def buildTargetFolder = linkerMainTargetFolder

}

/**
 * Scala.js linker build parameters for scope=test.
 */
trait BuildTest extends Build
  with BuildTestTarget
  with BuildTestDependency {

  @Description( """
  Name of the generated runtime JavaScript file.
  File is packaged inside <a href="#linkerMetaFolder"><b>linkerMetaFolder</b></a>
  """ )
  @Parameter(
    property     = "scalor.linkerTestRuntimeJs", //
    defaultValue = "test-runtime.js"
  )
  var linkerTestRuntimeJs : String = _

  @Description( """
  Name of the runtime dependency resolution report file.
  File is packaged inside <a href="#linkerMetaFolder"><b>linkerMetaFolder</b></a>
  """ )
  @Parameter(
    property     = "scalor.linkerTestRuntimeDeps", //
    defaultValue = "test-runtime.deps"
  )
  var linkerTestRuntimeDeps : String = _

  override def linkerRuntimeJs = linkerTestRuntimeJs
  override def linkerRuntimeDeps = linkerTestRuntimeDeps

}

trait BuildTestDependency extends base.BuildAnyDependency {

  @Description( """
  Classes generated by current project and included in linker class path.
  """ )
  @Parameter(
    property     = "scalor.linkerTestDependencyFolders", //
    defaultValue = "${project.build.directory}/macro-classes,${project.build.directory}/classes,${project.build.directory}/test-classes"
  )
  var linkerTestDependencyFolders : Array[ File ] = Array[ File ]()

  @Description( """
  Build linker class path from project dependencies selected by these scopes.
  """ )
  @Parameter(
    property     = "scalor.linkerTestDependencyScopes",
    defaultValue = "test"
  )
  var linkerTestDependencyScopes : Array[ String ] = Array[ String ]()

  override def buildDependencyFolders = linkerTestDependencyFolders
  override def buildDependencyScopes = linkerTestDependencyScopes

}

trait BuildTestTarget extends base.BuildAnyTarget with BuildMetaFolder {

  @Description( """
  Build output directory for the generated runtime JavaScript file.
  """ )
  @Parameter(
    property     = "scalor.linkerTestTargetFolder", //
    defaultValue = "${project.build.directory}/scala-js/test"
  )
  var linkerTestTargetFolder : File = _

  override def buildTargetFolder = linkerTestTargetFolder

}

/**
 * Build resource definitions.
 */
trait Build extends AnyRef
  with base.BuildAnyTarget
  with base.BuildAnyDependency {

  /**
   * Name of the generated runtime java script.
   */
  def linkerRuntimeJs : String

  /**
   * Name of the runtime dependency resolution report.
   */
  def linkerRuntimeDeps : String

}

/**
 * Location of generated runtime.js JavaScript inside the final jar.
 */
trait BuildMetaFolder {
  @Description( """
  Location of generated runtime JavaScript file inside the final jar.
  """ )
  @Parameter(
    property     = "scalor.linkerMetaFolder", //
    defaultValue = "META-INF/resources/script"
  )
  var linkerMetaFolder : String = _
}
