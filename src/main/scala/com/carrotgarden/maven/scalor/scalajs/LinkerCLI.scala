package com.carrotgarden.maven.scalor.scalajs

import org.apache.maven.plugins.annotations._
import org.scalajs.cli.Scalajsld

import scala.collection.mutable.ArrayBuffer

import java.io.File

import com.carrotgarden.maven.scalor.base
import com.carrotgarden.maven.scalor.util
import com.carrotgarden.maven.scalor.eclipse

import com.carrotgarden.maven.tools.Description

/**
 * Scala.js linker interface.
 *
 * https://github.com/scala-js/scala-js-cli
 */
// DEPRECATED
trait LinkerCLI extends base.ParamsAny {

  self : Build with eclipse.Context //
  with base.Logging with base.Params with base.BuildAnyDependency //
  =>

  import LinkerCLI._
  import util.Folder._

  @Description( """
  Build options for Scala.js CLI for Eclipse M2E environment.
  M2E environment is automatically detected when running inside Eclipse/M2E.
  Separator parameter: <a href="#commonSequenceSeparator"><b>commonSequenceSeparator</b></a>.
  Scala.js linker options reference:
  <a href="https://github.com/scala-js/scala-js-cli/blob/master/src/main/scala/org/scalajs/cli/Scalajsld.scala">
    Scalajsld.scala
  </a>
  """ )
  @Parameter(
    property     = "scalor.linkerInteractiveOptions", //
    defaultValue = """
    --fastOpt ;
    --sourceMap ;
    --debug ;
    --prettyPrint ;
    """
  )
  var linkerInteractiveOptions : String = _

  @Description( """
  Build options for Scala.js CLI in Continuous Integration environment.
  CI environment is defined as lack of Eclipse M2E environment.
  Separator parameter: <a href="#commonSequenceSeparator"><b>commonSequenceSeparator</b></a>.
  Scala.js linker options reference:
  <a href="https://github.com/scala-js/scala-js-cli/blob/master/src/main/scala/org/scalajs/cli/Scalajsld.scala">
    Scalajsld.scala
  </a>
  """ )
  @Parameter(
    property     = "scalor.linkerIntegrationOptions", //
    defaultValue = """
    --fastOpt ;
    --sourceMap ;
    --debug ;
    --prettyPrint ;
    """
  )
  var linkerIntegrationOptions : String = _

  @Description( """
  Enable logging of linker arguments during mojo execution.
  """ )
  @Parameter(
    property     = "scalor.linkerLogArgs", //
    defaultValue = "true"
  )
  var linkerLogArgs : Boolean = _

  /**
   * Report linker arguments during mojo execution.
   */
  def lnkerReportArgs( args : Array[ String ] ) = if ( linkerLogArgs ) {
    log.info( "Scala.js linker args:" )
    args.foreach( item => log.info( s"   ${item}" ) )
  }

  /**
   * Scala.js linker user options configuration.
   */
  def linkerUserOptions : Array[ String ] = {
    val options = if ( hasEclipseContext ) {
      linkerInteractiveOptions
    } else {
      linkerIntegrationOptions
    }
    parseCommonList( options, commonSequenceSeparator )
  }

  /**
   * Scala.js linker option to generate runtime.js JavaScript output file.
   */
  def linkerRuntimeOutput : Array[ String ] = {
    val runtimeFile = new File( buildTargetFolder, linkerRuntimeJS )
    ensureParent( runtimeFile )
    Array[ String ]( "--output", ensureCanonicalPath( runtimeFile ) )
  }

  /**
   * Classes generated by current project and included in linker class path.
   */
  def linkerBuildClassPath : Array[ String ] = {
    buildDependencyFolders.map { file =>
      ensureCanonicalPath( file )
    }
  }

  /**
   * Linker class path from project dependency artifacts in given scope.
   */
  def linkerDependencyFilePath : Array[ File ] = {
    projectClassPath( buildDependencyScopes )
  }

  /**
   * Linker class path from project dependency artifacts in given scope.
   */
  def linkerDependencyClassPath : Array[ String ] = {
    linkerDependencyFilePath.map { file =>
      ensureCanonicalPath( file )
    }
  }

  /**
   * Produce runtime.deps report for given scope.
   */
  def invokeReport() = {
    // TODO
  }

  /**
   * Produce runtime.js JavaScript for given scope.
   */
  def invokeLinker() = {
    val args = cleanup {
      linkerRuntimeOutput ++
        linkerUserOptions ++
        linkerBuildClassPath ++
        linkerDependencyClassPath
    }
    lnkerReportArgs( args )
    log.info( "Invoking Scala.js linker." )
    Scalajsld.main( args )
  }

}

object LinkerCLI {

  def cleanup( array : Array[ String ] ) : Array[ String ] = {
    array.filterNot( entry => entry == null || entry.isEmpty )
  }

}
